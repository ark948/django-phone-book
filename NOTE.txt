> added project base 'core'
> added contacts app
> need to register custom user model
> add accounts app
> add apps to installed_apps in settings.py
> define custom user model in accounts/models.py
> add AUTH_USER_MODEL to settings.py
> make migrations without specifying app name
> run migrations
> create superuser (admin-admin@admin.com-1)
> register the new user model in admin.py
> check admin.py to see if it works (and admin user must be there)
> commit


> add contact model contacts/models.py
> make migrations and specify contact name
> apply migrations
> add contact model to admin
> test admin interface
> install djangorestframework
> add it to installed_apps
> add rest_framework config class with default_permission_classes to settings.py
> update project urls.py to inlcude contacts urls.py
> update contacts app with:
    serializers.py
    views.py
    urls.py
> test the browsable api rest interface
> commit

> we need to add CORS and CSRF
> pip install django-cors-headers
> add 'corsheaders' to installed_apps after rest_framework
> add cors middlware to middlware config var after the session middlware
> and create a cors_allowed_origins list config var
> add CSRF protection after cors_allowed_origins
> commit

> compiling static files and folders
> add a static directory to project folder
> install whitenoise package, pip install whitenoise
> add whitenoise to installed_apps above static files app
> add whitenoise middlware to middlwares above common middlware
> and three config vars after static_url in settings.py
> run compile command
> commit

> update settings.py > rest_framework config var > default_permission_classes from allowAny to IsAuthenticated
> use the admin interface to create some new users
> then create some contact items and assign owner
> now, we need to add login and logout feature so the new test user can login and access the api
> udpate the project urls.py, add api-auth route
> now login link must appear in browsable api, use it to login as test user
> add a custom permission in permissions.py
> add the custom permission to views
> test the api
> commit

> to add authentication (registration)
> udpate settings.py rest_framework config var (add authentication configs explicitly)
> add 'rest_framework.authtoken' app to installed_apps (it is already included with django)
> run migrate
> check admin interface to see if tokens are added
> we will use dj-rest-auth and django-allauth
> login and logout and password reset will come with dj-rest-auth
> pip install dj-rest-auth
> add it to installed_apps (add dj_rest_auth)
> udpate main urls.py to include dj_rest_auth endpoints
> run server, navigate to localhost/dj-rest-auth/login to check out
> the route for password reset is localhsot/dj-rest-auth/password/reset (does not work, maybe after an email backend was added)
> install django-allauth
> several new configs need to be added to installed_apps
    "django.contrib.sites", # new
    "allauth", # new
    "allauth.account", # new
    "allauth.socialaccount", # new
    "dj_rest_auth.registration", # new
> django-allauth needs to be added to TEMPLATES config after existing context processors
> set email backend to console
> add SITE_ID = 1 to settings.py
> run migrate (this raised an error)
> (allauth.account.middleware.AccountMiddleware must be added to middlewares)
> i added it to the end of middlewares
> trying to run migrations again... (no problem)
> add registration routes to main urls.py
    path("api/v1/dj-rest-auth/registration/", include("dj_rest_auth.registration.urls")),
> run server and check registration (error while turning server on)
> no module named 'requests'
> attempting to change the order of allauth middleware (no change)
> moved up django_rest_framework config var to after installed_apps
> moved back allauth middleware to end of middlewares
> installed 'requests' package - pip install requests
> server turned on with no problem
> the address for registration is http://127.0.0.1:8000/dj-rest-auth/registration/
> arman-arman@test.com-hello123*
> attempting to login (successful)
> attempting to logout and reset password (error, 
> django.urls.exceptions.NoReverseMatch: Reverse for 'password_reset_confirm' not found. 
> 'password_reset_confirm' is not a valid view function or pattern name.)
> checking if everything is according to book
> fixed it by adding password reset rouet to main urls.py
> another problem is raised (similar but for password reset confirm)
> IMPORTANT: This feature cannot be added using dj-rest-auth
> last commit for dj-rest-auth was for 3 years ago. it is considered garbage
> skip and use another approach later
> commit

> adding viewsets and routers for users list
> add a user serializer to serializers.py to accounts app
> add users list view and user detail view to accounts/views.py
> add urls.py to accounts app
> include this urls.py in project urls.py
    path("", include("accounts.urls")),
    path("", include("contacts.urls")),
> notice i kept both routes empty, there was no problem.
> add isAdminUser permission to both these views
> fire up the server and check them in localhost/users
> add a view that will inherit from viewset to accounts/views.py
> in accounts/urls.py, define a SimpleRouter and register the viewset with it
> add router.urls to urlpatterns var
> check it out (there will be no difference in functionality, only less code was written)
> commit

> to add schema and documentation
> pip install drf-spectacular
> add it to installed_apps
> register within rest_framework config var
> add drf-spectacular config var itself (metadata)
> use the following command to generate a schema file
> python manage.py spectacular --file schema.yml
> dynamic schema routes were added to main urls.py
> these will be available at 
    localhost/api/schema/
    localhost/api/schema/redoc/
    localhost/api/schema/swagger-ui/
> redoc and swagger-ui both require internet to load (for the first time)
> commit

> adding production environment
> pip install environs
> pip install environs[django]
> instanciate the environs package in settnigs.py
> create an .env file in root project directory and add it to .gitignore
> add debug var to both env and settings.py
> add secret_key to both
> to generate secret_key you can use python's secrets module
> update allowed_hosts
> next is database url, dj-database-url is required that was installed with environs package django goodies
> update settings.py > database config var to read from env file
> compiling static files
> configurations have already been placed, just run the command again
> python manage.py collectstatic
> done, commit